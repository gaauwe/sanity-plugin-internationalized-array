{"version":3,"file":"index.esm.js","sources":["../src/cache.ts","../src/components/Preload.tsx","../src/components/createFieldName.ts","../src/components/getSelectedValue.ts","../src/components/Feedback.tsx","../src/components/languageContext.tsx","../src/components/InternationalizedArray.tsx","../src/schema/array.ts","../src/components/InternationalizedField.tsx","../src/components/getToneFromValidation.ts","../src/components/InternationalizedInput.tsx","../src/schema/object.ts","../src/plugin.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport * as suspend from 'suspend-react'\nimport type {Language} from './types'\n\nexport const namespace = 'sanity-plugin-internationalized-array'\n\nexport const version = 'v0'\n\n// https://github.com/pmndrs/suspend-react#preloading\nexport const preload = (fn: () => Promise<Language[]>) =>\n  suspend.preload(() => fn(), [version, namespace])\n\n// https://github.com/pmndrs/suspend-react#cache-busting\nexport const clear = () => suspend.clear([version, namespace])\n\n// https://github.com/pmndrs/suspend-react#peeking-into-entries-outside-of-suspense\nexport const peek = (selectedValue: Record<string, unknown>) =>\n  suspend.peek([version, namespace, selectedValue]) as Language[] | undefined\n","import {peek, preload} from '../cache'\nimport {memo} from 'react'\nimport type {PluginConfig} from '../types'\nimport {useClient} from 'sanity'\n\nexport default memo(function Preload(\n  props: Required<Pick<PluginConfig, 'apiVersion' | 'languages'>>\n) {\n  const client = useClient({apiVersion: props.apiVersion})\n  if (!Array.isArray(peek({}))) {\n    // eslint-disable-next-line require-await\n    preload(async () =>\n      Array.isArray(props.languages) ? props.languages : props.languages(client, {})\n    )\n  }\n\n  return null\n})\n","export function camelCase(string: string): string {\n  return string.replace(/-([a-z])/g, (g) => g[1].toUpperCase())\n}\n\nexport function titleCase(string: string): string {\n  return string\n    .split(` `)\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(` `)\n}\n\nexport function pascalCase(string: string): string {\n  return titleCase(camelCase(string))\n}\n\nexport function createFieldName(name: string, addValue = false): string {\n  return addValue\n    ? [`internationalizedArray`, pascalCase(name), `Value`].join(``)\n    : [`internationalizedArray`, pascalCase(name)].join(``)\n}\n","import {get} from 'lodash'\n\nexport const getSelectedValue = (\n  select: Record<string, string> | undefined,\n  document:\n    | {\n        [x: string]: unknown\n      }\n    | undefined\n): Record<string, unknown> => {\n  if (!select || !document) {\n    return {}\n  }\n\n  const selection: Record<string, string> = select || {}\n  const targetKeys = Object.keys(selection)\n  const selectedValue = targetKeys.reduce<Record<string, unknown>>((acc, key) => {\n    acc[key] = get(document, selection[key])\n\n    return acc\n  }, {})\n\n  return selectedValue\n}\n","import {Text, Card, Stack, Code} from '@sanity/ui'\nimport React from 'react'\n\nconst schemaExample = {\n  languages: [\n    {id: 'en', title: 'English'},\n    {id: 'no', title: 'Norsk'},\n  ],\n}\n\nexport default function Feedback() {\n  return (\n    <Card tone=\"caution\" border radius={2} padding={3}>\n      <Stack space={4}>\n        <Text>\n          An array of language objects must be passed into the <code>internationalizedArray</code>{' '}\n          helper function, each with an <code>id</code> and <code>title</code> field. Example:\n        </Text>\n        <Card padding={2} border radius={2}>\n          <Code size={1} language=\"javascript\">\n            {JSON.stringify(schemaExample, null, 2)}\n          </Code>\n        </Card>\n      </Stack>\n    </Card>\n  )\n}\n","import React from 'react'\n\nimport {Language} from '../types'\n\nexport const LanguageContext = React.createContext<{languages: Language[]}>({\n  languages: [],\n})\n\nexport const LanguageProvider = LanguageContext.Provider\n","import React, {useCallback, useEffect, useMemo} from 'react'\nimport {\n  insert,\n  set,\n  setIfMissing,\n  ArrayOfObjectsItemMember,\n  ArrayOfObjectsItem,\n  ArrayOfObjectsInputProps,\n  useClient,\n  useFormBuilder,\n} from 'sanity'\nimport {Button, Grid, Stack, useToast} from '@sanity/ui'\nimport {AddIcon} from '@sanity/icons'\nimport {suspend} from 'suspend-react'\nimport equal from 'fast-deep-equal'\n\nimport type {Value, ArraySchemaWithLanguageOptions} from '../types'\nimport Feedback from './Feedback'\n// TODO: Move this provider to the root component\nimport {LanguageProvider} from './languageContext'\nimport {namespace, version} from '../cache'\nimport {getSelectedValue} from './getSelectedValue'\n\nexport type InternationalizedArrayProps = ArrayOfObjectsInputProps<\n  Value,\n  ArraySchemaWithLanguageOptions\n>\n\nexport default function InternationalizedArray(props: InternationalizedArrayProps) {\n  const {members, value, schemaType, onChange} = props\n  const readOnly = typeof schemaType.readOnly === 'boolean' ? schemaType.readOnly : false\n  const {options} = schemaType\n  const toast = useToast()\n  const {value: document} = useFormBuilder()\n  const selectedValue = getSelectedValue(options.select, document)\n\n  const {apiVersion} = options\n  const client = useClient({apiVersion})\n  const languages = Array.isArray(options.languages)\n    ? options.languages\n    : suspend(\n        // eslint-disable-next-line require-await\n        async () => {\n          if (typeof options.languages === 'function') {\n            return options.languages(client, selectedValue)\n          }\n          return options.languages\n        },\n        [version, namespace, selectedValue],\n        {equal}\n      )\n\n  const handleAddLanguage = useCallback(\n    (languageId?: string) => {\n      if (!languages?.length) {\n        return\n      }\n\n      const itemBase = {_type: `${schemaType.name}Value`}\n\n      // Create new items\n      const newItems = languageId\n        ? // Just one for this language\n          [{...itemBase, _key: languageId}]\n        : // Or one for every missing language\n          languages\n            .filter((language) =>\n              value?.length ? !value.find((v) => v._key === language.id) : true\n            )\n            .map((language) => ({...itemBase, _key: language.id}))\n\n      // Insert new items in the correct order\n      const languagesInUse = value?.length ? value.map((v) => v) : []\n\n      const insertions = newItems.map((item) => {\n        // What's the original index of this language?\n        const languageIndex = languages.findIndex((l) => item._key === l.id)\n\n        // What languages are there beyond that index?\n        const remainingLanguages = languages.slice(languageIndex + 1)\n\n        // So what is the index in the current value array of the next language in the language array?\n        const nextLanguageIndex = languagesInUse.findIndex((l) =>\n          // eslint-disable-next-line max-nested-callbacks\n          remainingLanguages.find((r) => r.id === l._key)\n        )\n\n        // Keep local state up to date incase multiple insertions are being made\n        if (nextLanguageIndex < 0) {\n          languagesInUse.push(item)\n        } else {\n          languagesInUse.splice(nextLanguageIndex, 0, item)\n        }\n\n        return nextLanguageIndex < 0\n          ? // No next language (-1), add to end of array\n            insert([item], 'after', [nextLanguageIndex])\n          : // Next language found, insert before that\n            insert([item], 'before', [nextLanguageIndex])\n      })\n\n      onChange([setIfMissing([]), ...insertions])\n    },\n    [languages, onChange, schemaType.name, value]\n  )\n\n  // TODO: This is lazy, reordering and re-setting the whole array â€“ it could be surgical\n  const handleRestoreOrder = useCallback(() => {\n    if (!value?.length || !languages?.length) {\n      return\n    }\n\n    // Create a new value array in the correct order\n    // This would also strip out values that don't have a language as the key\n    const updatedValue = value\n      .reduce((acc, v) => {\n        const newIndex = languages.findIndex((l) => l.id === v?._key)\n\n        if (newIndex > -1) {\n          acc[newIndex] = v\n        }\n\n        return acc\n      }, [] as Value[])\n      .filter(Boolean)\n\n    if (value?.length !== updatedValue.length) {\n      toast.push({\n        title: 'There was an error reordering languages',\n        status: 'warning',\n      })\n    }\n\n    onChange(set(updatedValue))\n  }, [toast, languages, onChange, value])\n\n  const allKeysAreLanguages = useMemo(() => {\n    if (!value?.length || !languages?.length) {\n      return true\n    }\n\n    return value?.every((v) => languages.find((l) => l?.id === v?._key))\n  }, [value, languages])\n\n  // Check languages are in the correct order\n  const languagesInUse = useMemo(\n    () =>\n      languages && languages.length > 1\n        ? languages.filter((l) => value?.find((v) => v._key === l.id))\n        : [],\n    [languages, value]\n  )\n\n  const languagesOutOfOrder = useMemo(() => {\n    if (!value?.length || !languagesInUse.length) {\n      return []\n    }\n\n    return value\n      .map((v, vIndex) => (vIndex === languagesInUse.findIndex((l) => l.id === v._key) ? null : v))\n      .filter(Boolean)\n  }, [value, languagesInUse])\n\n  const languagesAreValid = useMemo(\n    () =>\n      !languages?.length || (languages?.length && languages.every((item) => item.id && item.title)),\n    [languages]\n  )\n\n  useEffect(() => {\n    if (languagesOutOfOrder.length > 0 && allKeysAreLanguages) {\n      handleRestoreOrder()\n    }\n  }, [languagesOutOfOrder, allKeysAreLanguages, handleRestoreOrder])\n\n  if (!languagesAreValid) {\n    return <Feedback />\n  }\n\n  return (\n    <LanguageProvider value={{languages}}>\n      <Stack space={2}>\n        {members?.length > 0 ? (\n          <>\n            {/* TODO: Resolve type for ArrayOfObjectsItemMember */}\n            {/* @ts-ignore */}\n            {members.map((member: ArrayOfObjectsItemMember) => {\n              if (member.kind === 'item') {\n                return (\n                  <ArrayOfObjectsItem\n                    key={member.key}\n                    member={member}\n                    renderItem={props.renderItem}\n                    renderField={props.renderField}\n                    renderInput={props.renderInput}\n                    renderPreview={props.renderPreview}\n                  />\n                )\n              }\n\n              return null\n            })}\n          </>\n        ) : null}\n\n        {/* This now happens automatically */}\n        {/* {languagesOutOfOrder.length > 0 && allKeysAreLanguages ? (\n          <Button\n            tone=\"caution\"\n            icon={RestoreIcon}\n            onClick={() => handleRestoreOrder()}\n            text=\"Restore order of languages\"\n          />\n        ) : null} */}\n\n        {/* Show buttons if languages are configured */}\n        {/* Hide them if all languages have values */}\n        {languages?.length > 0 && languagesInUse.length < languages.length ? (\n          <Stack space={2}>\n            {/* Hide language-specific buttons if there's only one */}\n            {/* No more than 5 columns */}\n            {languages.length > 1 ? (\n              <Grid columns={Math.min(languages.length, 5)} gap={2}>\n                {languages.map((language) => (\n                  <Button\n                    key={language.id}\n                    tone=\"primary\"\n                    mode=\"ghost\"\n                    fontSize={1}\n                    disabled={readOnly || Boolean(value?.find((item) => item._key === language.id))}\n                    text={language.id.toUpperCase()}\n                    icon={AddIcon}\n                    onClick={() => handleAddLanguage(language.id)}\n                  />\n                ))}\n              </Grid>\n            ) : null}\n            <Button\n              tone=\"primary\"\n              mode=\"ghost\"\n              disabled={readOnly || (value && value?.length >= languages?.length)}\n              icon={AddIcon}\n              text={\n                // eslint-disable-next-line no-nested-ternary\n                value?.length\n                  ? `Add missing ${\n                      languages.length - value.length === 1 ? `language` : `languages`\n                    }`\n                  : languages.length === 1\n                  ? `Add ${languages[0].title} Field`\n                  : `Add all languages`\n              }\n              onClick={() => handleAddLanguage()}\n            />\n          </Stack>\n        ) : null}\n      </Stack>\n    </LanguageProvider>\n  )\n}\n","/* eslint-disable no-nested-ternary */\nimport {defineField, type FieldDefinition, type Rule} from 'sanity'\nimport {peek} from '../cache'\n\nimport {createFieldName} from '../components/createFieldName'\nimport {getSelectedValue} from '../components/getSelectedValue'\nimport InternationalizedArray from '../components/InternationalizedArray'\nimport {Language, LanguageCallback, Value} from '../types'\n\ntype ArrayFactoryConfig = {\n  apiVersion: string\n  select?: Record<string, string>\n  languages: Language[] | LanguageCallback\n  type: string | FieldDefinition\n}\n\nexport default (config: ArrayFactoryConfig): FieldDefinition<'array'> => {\n  const {apiVersion, select, languages, type} = config\n  const typeName = typeof type === `string` ? type : type.name\n  const arrayName = createFieldName(typeName)\n  const objectName = createFieldName(typeName, true)\n\n  return defineField({\n    name: arrayName,\n    title: 'Internationalized array',\n    type: 'array',\n    // TODO: Resolve this typing issue with the outer component\n    // @ts-ignore\n    components: {\n      input: InternationalizedArray,\n    },\n    options: {apiVersion, select, languages},\n    // TODO: Resolve this typing issue with the inner object\n    // @ts-ignore\n    of: [\n      defineField({\n        ...(typeof type === 'string' ? {} : type),\n        name: objectName,\n        type: objectName,\n      }),\n    ],\n    validation: (rule: Rule) =>\n      rule.custom<Value[]>(async (value, context) => {\n        if (!value) {\n          return true\n        }\n\n        const selectedValue = getSelectedValue(select, context.document)\n        const client = context.getClient({apiVersion})\n        const contextLanguages: Language[] = Array.isArray(context?.type?.options?.languages)\n          ? context!.type!.options.languages\n          : Array.isArray(peek(selectedValue))\n          ? peek(selectedValue)\n          : await context?.type?.options.languages(client, selectedValue)\n\n        if (value && value.length > contextLanguages.length) {\n          return `Cannot be more than ${\n            contextLanguages.length === 1 ? `1 item` : `${contextLanguages.length} items`\n          }`\n        }\n\n        const nonLanguageKeys = value?.length\n          ? value.filter((item) => !contextLanguages.find((language) => item._key === language.id))\n          : []\n        if (nonLanguageKeys.length) {\n          return {\n            message: `Array item keys must be valid languages registered to the field type`,\n            paths: nonLanguageKeys.map((item) => [{_key: item._key}]),\n          }\n        }\n\n        // Ensure there's no duplicate `language` fields\n        type KeyedValues = {\n          [key: string]: Value[]\n        }\n\n        const valuesByLanguage = value?.length\n          ? value\n              .filter((item) => Boolean(item?._key))\n              .reduce((acc, cur) => {\n                if (acc[cur._key]) {\n                  return {...acc, [cur._key]: [...acc[cur._key], cur]}\n                }\n                return {\n                  ...acc,\n                  [cur._key]: [cur],\n                }\n              }, {} as KeyedValues)\n          : {}\n        const duplicateValues = Object.values(valuesByLanguage)\n          .filter((item) => item?.length > 1)\n          .flat()\n        if (duplicateValues.length) {\n          return {\n            message: 'There can only be one field per language',\n            paths: duplicateValues.map((item) => [{_key: item._key}]),\n          }\n        }\n\n        return true\n      }),\n  })\n}\n","import {FieldProps} from 'sanity'\n\nexport default function InternationalizedField(props: FieldProps) {\n  // Show reference field selector if there's a value\n  if (props.schemaType.name === 'reference' && props.value) {\n    return props.renderDefault({\n      ...props,\n      title: '',\n      level: 0,\n    })\n  }\n\n  return props.children\n}\n","import {CardTone} from '@sanity/ui'\nimport {FormNodeValidation} from 'sanity'\n\nexport function getToneFromValidation(validations: FormNodeValidation[]): CardTone | undefined {\n  if (!validations?.length) {\n    return undefined\n  }\n\n  const validationLevels = validations.map((v) => v.level)\n\n  if (validationLevels.includes('error')) {\n    return `critical`\n  } else if (validationLevels.includes('warning')) {\n    return `caution`\n  }\n\n  return undefined\n}\n","import {ObjectItemProps, useFormValue} from 'sanity'\nimport React, {useCallback, useMemo} from 'react'\nimport {unset, set} from 'sanity'\nimport {Button, Flex, Label, MenuButton, Menu, MenuItem, Card, Spinner, Stack} from '@sanity/ui'\nimport {RemoveCircleIcon} from '@sanity/icons'\n\nimport {getToneFromValidation} from './getToneFromValidation'\nimport {LanguageContext} from './languageContext'\n\ntype InternationalizedValue = {\n  _type: string\n  _key: string\n  value: string\n}\n\nexport default function InternationalizedInput(props: ObjectItemProps<InternationalizedValue>) {\n  const parentValue = useFormValue(props.path.slice(0, -1)) as InternationalizedValue[]\n\n  const inlineProps = {\n    ...props.inputProps,\n    // This is the magic that makes inline editing work?\n    members: props.inputProps.members.filter((m) => m.kind === 'field' && m.name === 'value'),\n    // This just overrides the type\n    // TODO: Remove this as it shouldn't be necessary?\n    value: props.value as InternationalizedValue,\n  }\n\n  const {validation, value, onChange, readOnly} = inlineProps\n\n  // The parent array contains the languages from the plugin config\n  const {languages} = React.useContext(LanguageContext)\n\n  const languageKeysInUse = useMemo(() => parentValue?.map((v) => v._key) ?? [], [parentValue])\n  const keyIsValid = languages?.length ? languages.find((l) => l.id === value._key) : false\n\n  // Changes the key of this item, ideally to a valid language\n  const handleKeyChange = useCallback(\n    (languageId: string) => {\n      if (!value || !languages?.length || !languages.find((l) => l.id === languageId)) {\n        return\n      }\n\n      onChange([set(languageId, ['_key'])])\n    },\n    [onChange, value, languages]\n  )\n\n  // Removes this item from the array\n  const handleUnset = useCallback(() => {\n    onChange(unset())\n  }, [onChange])\n\n  if (!languages) {\n    return <Spinner />\n  }\n\n  return (\n    <Card paddingTop={2} tone={getToneFromValidation(validation)}>\n      <Stack space={2}>\n        <Card tone=\"inherit\">\n          {keyIsValid ? (\n            <Label muted size={1}>\n              {value._key}\n            </Label>\n          ) : (\n            <MenuButton\n              button={<Button fontSize={1} text={`Change \"${value._key}\"`} />}\n              id={`${value._key}-change-key`}\n              menu={\n                <Menu>\n                  {languages.map((language) => (\n                    <MenuItem\n                      disabled={languageKeysInUse.includes(language.id)}\n                      fontSize={1}\n                      key={language.id}\n                      text={language.id.toLocaleUpperCase()}\n                      onClick={() => handleKeyChange(language.id)}\n                    />\n                  ))}\n                </Menu>\n              }\n              placement=\"right\"\n              popover={{portal: true}}\n            />\n          )}\n        </Card>\n        <Flex align=\"center\" gap={2}>\n          <Card flex={1} tone=\"inherit\">\n            {props.inputProps.renderInput(props.inputProps)}\n          </Card>\n\n          <Card tone=\"inherit\">\n            <Button\n              mode=\"bleed\"\n              icon={RemoveCircleIcon}\n              tone=\"critical\"\n              disabled={readOnly}\n              onClick={handleUnset}\n            />\n          </Card>\n        </Flex>\n      </Stack>\n    </Card>\n  )\n}\n","import {defineField, FieldDefinition} from 'sanity'\n\nimport {createFieldName} from '../components/createFieldName'\nimport InternationalizedField from '../components/InternationalizedField'\nimport InternationalizedInput from '../components/InternationalizedInput'\n\ntype ObjectFactoryConfig = {\n  type: string | FieldDefinition\n}\n\nexport default (config: ObjectFactoryConfig): FieldDefinition<'object'> => {\n  const {type} = config\n  const typeName = typeof type === `string` ? type : type.name\n  const objectName = createFieldName(typeName, true)\n\n  return defineField({\n    name: objectName,\n    title: `Internationalized array ${type}`,\n    type: 'object',\n    // TODO: Resolve this typing issue with the return type\n    // @ts-ignore\n    components: {\n      // TODO: Resolve this typing issue with the outer component\n      // @ts-ignore\n      item: InternationalizedInput,\n    },\n    // TODO: Address this typing issue with the inner object\n    // @ts-ignore\n    fields: [\n      typeof type === `string`\n        ? // Define a simple field if all we have is the name as a string\n          defineField({\n            name: 'value',\n            type,\n            // TODO: Address this typing issue with components on a dynamic `type`\n            // @ts-ignore\n            components: {\n              // TODO: Address this typing issue with the inner object\n              // @ts-ignore\n              field: InternationalizedField,\n            },\n          })\n        : // Pass in the configured options, but overwrite the name\n          {\n            ...type,\n            name: 'value',\n            components: {\n              field: InternationalizedField,\n            },\n          },\n    ],\n    preview: {\n      select: {\n        title: 'value',\n        subtitle: '_key',\n      },\n    },\n  })\n}\n","import React from 'react'\nimport {definePlugin} from 'sanity'\nimport Preload from './components/Preload'\nimport array from './schema/array'\nimport object from './schema/object'\nimport {PluginConfig} from './types'\n\nconst CONFIG_DEFAULT: PluginConfig = {\n  languages: [],\n  fieldTypes: [],\n}\n\nexport const internationalizedArray = definePlugin<PluginConfig>((config = CONFIG_DEFAULT) => {\n  const {apiVersion = '2022-11-27', select, languages, fieldTypes} = {...CONFIG_DEFAULT, ...config}\n\n  return {\n    name: 'sanity-plugin-internationalized-array',\n    // If `languages` is a callback then let's preload it\n    studio: Array.isArray(languages)\n      ? undefined\n      : {\n          components: {\n            layout: (props) => (\n              <>\n                <Preload apiVersion={apiVersion} languages={languages} />\n                {props.renderDefault(props)}\n              </>\n            ),\n          },\n        },\n    schema: {\n      types: [\n        ...fieldTypes.map((type) => array({type, apiVersion, select, languages})),\n        ...fieldTypes.map((type) => object({type})),\n      ],\n    },\n  }\n})\n"],"names":["namespace","clear","suspend","peek","selectedValue","Preload","memo","props","client","useClient","apiVersion","fn","Array","isArray","async","languages","preload","pascalCase","string","split","map","word","charAt","toUpperCase","slice","join","titleCase","replace","g","camelCase","createFieldName","name","addValue","getSelectedValue","select","document","selection","Object","keys","reduce","acc","key","get","schemaExample","id","title","Feedback","jsx","Card","tone","border","radius","padding","children","jsxs","Stack","space","Text","Code","size","language","JSON","stringify","LanguageContext","React","createContext","LanguageProvider","Provider","InternationalizedArray","members","value","schemaType","onChange","readOnly","options","toast","useToast","useFormBuilder","equal","handleAddLanguage","useCallback","languageId","length","itemBase","_type","concat","newItems","_key","filter","find","v","languagesInUse","insertions","item","languageIndex","findIndex","l","remainingLanguages","nextLanguageIndex","r","push","splice","insert","setIfMissing","handleRestoreOrder","updatedValue","newIndex","Boolean","status","set","allKeysAreLanguages","useMemo","every","languagesOutOfOrder","vIndex","languagesAreValid","useEffect","Fragment","member","kind","ArrayOfObjectsItem","renderItem","renderField","renderInput","renderPreview","Grid","columns","Math","min","gap","Button","mode","fontSize","disabled","text","icon","AddIcon","onClick","array","config","type","typeName","arrayName","objectName","defineField","components","input","of","_objectSpread","validation","rule","custom","context","_a","_b","_c","getClient","contextLanguages","nonLanguageKeys","message","paths","valuesByLanguage","cur","duplicateValues","values","flat","InternationalizedField","renderDefault","level","getToneFromValidation","validations","validationLevels","includes","InternationalizedInput","parentValue","useFormValue","path","inlineProps","inputProps","m","useContext","languageKeysInUse","keyIsValid","handleKeyChange","handleUnset","unset","paddingTop","Label","muted","MenuButton","button","menu","Menu","MenuItem","toLocaleUpperCase","placement","popover","portal","Flex","align","flex","RemoveCircleIcon","Spinner","object","fields","field","preview","subtitle","CONFIG_DEFAULT","fieldTypes","internationalizedArray","definePlugin","studio","layout","schema","types"],"mappings":"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"}